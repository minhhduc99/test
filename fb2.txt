class ListFeedback(views.APIView):
    pagination_class = BasePagination
    serializer_class = FeedbackSerializer
    @property
    def paginator(self):
        if not hasattr(self, '_paginator'):
            if self.pagination_class is None:
                self._paginator = None
            else:
                self._paginator = self.pagination_class()
        else:
            pass
        return self._paginator
    def paginate_queryset(self, queryset):
        
        if self.paginator is None:
            return None
        return self.paginator.paginate_queryset(queryset,
                   self.request, view=self)
    def get_paginated_response(self, data):
        assert self.paginator is not None
        return self.paginator.get_paginated_response(data)
    
    @extend_schema(
        responses={200: FeedbackSerializer},
        description="Description API: List all feedbacks",
        parameters=[
            OpenApiParameter(
                name="page_size",
                type=int,
                location=OpenApiParameter.QUERY,
                description="Page size",
            ),
            OpenApiParameter(
                name="batch_id",
                type=int,
                location=OpenApiParameter.QUERY,
                description="Batch ID",
            ),
            OpenApiParameter(
                name="reporter",
                type=str,
                location=OpenApiParameter.QUERY,
                description="Name of reporter",
            )
        ]
    )
    def get(self, request, format=None):
        batch_id = self.request.query_params.get('batch_id', 0)
        reporter = self.request.query_params.get('reporter', "")
        page_size = self.request.query_params.get('page_size', 0)
        if batch_id:
            data = []
            for question_batch in QuestionBatch.objects.filter(batch=batch_id):
                for feedback in Feedback.objects.filter(question_batch=question_batch):
                    serializer = FeedbackSerializer(feedback)
                    data.append(serializer.data)
            context = {
                "message": "Listed Successfully",
                "status": status.HTTP_200_OK,
                "data": data,
                "errors": None
            }
            return Response(context)
        
        if reporter:
            data = []
            for feedback in Feedback.objects.filter(reporter=reporter):
                serializer = FeedbackSerializer(feedback)
                data.append(serializer.data)
            context = {
                "message": "Listed Successfully",
                "status": status.HTTP_200_OK,
                "data": data,
                "errors": None
            }
            return Response(context)
        
        instance = Feedback.objects.all()
        page = self.paginate_queryset(instance)
        if page is not None:
            serializer = self.get_paginated_response(self.serializer_class(page,
                many=True).data)
        else:
            serializer = self.serializer_class(instance, many=True)
        context = {
            "message": "Listed Successfully",
            "status": status.HTTP_200_OK,
            "data": serializer.data,
            "errors": None
        }
        return Response(context)
